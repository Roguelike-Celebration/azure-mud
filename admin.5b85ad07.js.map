{"mappings":"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","sources":["src/admin/actions.ts","src/admin/reducer.ts","src/admin/components/LoggedOutView.tsx","src/admin/components/RoomList.tsx","src/admin/components/RoomOptionsView.tsx","src/admin/components/App.tsx","src/admin/index.tsx"],"sourcesContent":["import { Room } from '../room'\n\nexport type Action =\n  | LoggedInAction\n  | UpdateRoomIdsAction\n  | UpdateAndShowRoomAction\n\nexport enum ActionType {\n  LoggedIn = 'LOGGED_IN',\n  UpdateRoomIds = 'UPDATE_ROOM_IDS',\n  UpdateAndShowRoom = 'UPDATE_AND_SHOW_ROOM'\n}\n\ninterface LoggedInAction {\n  type: ActionType.LoggedIn;\n  value: undefined;\n}\n\nexport const LoggedInAction = (): LoggedInAction => {\n  return {\n    type: ActionType.LoggedIn,\n    value: undefined\n  }\n}\n\ninterface UpdateRoomIdsAction {\n  type: ActionType.UpdateRoomIds;\n  value: string[];\n}\n\nexport const UpdateRoomIds = (roomIds: string[]): UpdateRoomIdsAction => {\n  return {\n    type: ActionType.UpdateRoomIds,\n    value: roomIds\n  }\n}\n\ninterface UpdateAndShowRoomAction {\n  type: ActionType.UpdateAndShowRoom;\n  value: {\n    roomId: string\n    roomData: Room\n  };\n}\n\nexport const UpdateAndShowRoomAction = (roomId: string, roomData: Room): UpdateAndShowRoomAction => {\n  return {\n    type: ActionType.UpdateAndShowRoom,\n    value: { roomId, roomData }\n  }\n}\n","import firebase from 'firebase/app'\nimport Config from '../config'\nimport { Room } from '../room'\nimport { Action, ActionType } from './actions'\n\nexport interface State {\n  firebaseApp: firebase.app.App\n  isLoggedIn: boolean\n\n  roomIds?: string[]\n  roomData: {[roomId: string]: Room}\n\n  displayedRoomId?: string\n}\n\nexport const defaultState: State = {\n  firebaseApp: firebase.initializeApp(Config.FIREBASE_CONFIG),\n  isLoggedIn: false,\n  roomData: {}\n}\n\n// TODO: Split this out into separate reducers based on worldstate actions vs UI actions?\nexport default (oldState: State, action: Action): State => {\n  const state: State = JSON.parse(JSON.stringify(oldState))\n\n  if (action.type === ActionType.LoggedIn) {\n    state.isLoggedIn = true\n  }\n\n  if (action.type === ActionType.UpdateRoomIds) {\n    state.roomIds = action.value\n  }\n\n  if (action.type === ActionType.UpdateAndShowRoom) {\n    state.roomData[action.value.roomId] = action.value.roomData\n    state.displayedRoomId = action.value.roomId\n  }\n\n  return state\n}\n","// Note - we're doing firebase 8 because the firebaseui stuff doesn't work with 9, big F\nimport { currentUser, sendSignInLinkToEmail } from '../../authentication'\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth'\nimport React from 'react'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\n\nconst uiConfig = {\n  callbacks: {\n    // The documentation on the firebaseui README appears somewhat borked at time of writing; the structure of\n    // AuthResult doesn't line up with itself! If you go back to that README treat it with caution.\n    signInSuccessWithAuthResult: function (authResult, redirectUrl) {\n      const user = currentUser()\n      if (user.shouldVerifyEmail) {\n        sendSignInLinkToEmail(user.email)\n      }\n      window.location.reload()\n      return false\n    }\n  },\n  signInOptions: [\n    firebase.auth.EmailAuthProvider.PROVIDER_ID,\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    firebase.auth.TwitterAuthProvider.PROVIDER_ID\n  ]\n}\n\nexport default function LoggedOutView () {\n  return (\n    <div>\n      <header role=\"banner\">\n        <h1>Welcome to the secret Roguelike Celebration backstage area!</h1>\n      </header>\n      <main role=\"main\">\n        <p>\n          If you&apos;re not a Roguelike Celebration admin, this isn&apos;t for you. If you should be an admin, but can&apos;t log in, ask in our other chat.\n        </p>\n        <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n      </main>\n    </div>\n  )\n}\n","/* eslint-disable react/display-name */\nimport _ from 'lodash'\nimport React, { useContext } from 'react'\n\nimport { DispatchContext } from './App'\nimport { getAllRooms, getRoom, resetRoomData } from '../../networking'\nimport { UpdateAndShowRoomAction } from '../actions'\n\nexport default function (props: {roomIds: string[]}) {\n  const dispatch = useContext(DispatchContext)\n\n  const roomIds = _.sortBy(props.roomIds || [])\n\n  const clickedResetData = async () => {\n    if (!confirm(\"Are you sure you'd like to reset room data?\")) return\n    await resetRoomData()\n    await getAllRooms()\n  }\n\n  const clickedDownloadData = async () => {\n    const rooms = await getAllRooms()\n    const roomJSON = JSON.stringify(rooms, null, 2)\n\n    // via https://stackoverflow.com/questions/34156282/how-do-i-save-json-to-local-text-file\n    var a = document.createElement('a')\n    var file = new Blob([roomJSON], { type: 'application/json' })\n    a.href = URL.createObjectURL(file)\n    a.download = 'roomData.json'\n    a.click()\n  }\n\n  const onClick = async (e) => {\n    const roomId = e.target && e.target.getAttribute && e.target.getAttribute('data-room')\n    if (roomId) {\n      // TODO: This is bad compared to handling this async better\n      // The cobbler's children have no shoes.\n      const roomData = await getRoom(roomId)\n      console.log('got room data', roomId, roomData)\n      dispatch(UpdateAndShowRoomAction(roomId, roomData))\n    }\n  }\n\n  return (\n    <ul id='room-list'>\n      {roomIds.map(id => {\n        return (\n          <li key={`room-button-${id}`}>\n            <button\n              data-room={id}\n              className='nav-item'\n              onClick={onClick}\n            >\n              {id}\n            </button>\n          </li>)\n      })}\n      <button\n        onClick={clickedResetData}\n        style={{ marginTop: '1em' }}>\n        Reset Room Data to Disk Copy\n      </button>\n      <button\n        onClick={clickedDownloadData}\n        style={{ marginTop: '1em', display: 'block' }}>\n        Download Local JSON\n      </button>\n    </ul>\n  )\n}\n","/* eslint-disable react/display-name */\nimport _ from 'lodash'\nimport React from 'react'\n\nimport { deleteRoom } from '../../networking'\n\nexport default function (props: {roomId: string, updateRoom: () => void, createRoom: (name: string) => void}) {\n  const clickedNew = async () => {\n    const name = prompt('What would you like the room to be called?')\n    if (!name) return\n    await props.createRoom(name)\n  }\n\n  const clickedDelete = async () => {\n    if (!confirm('Are you SURE you want to delete this? This will delete it from the server memory, and you will only be able to restore it if it is saved on disk.')) return\n\n    await deleteRoom(props.roomId)\n    // TODO: Remove roomId from local list\n  }\n\n  const clickedSave = () => {\n    props.updateRoom()\n  }\n\n  return (\n    <div id='room-options-view'>\n      <button\n        onClick={clickedNew}>\n        Create\n      </button>\n      <button\n        onClick={clickedDelete}>\n        Delete\n      </button>\n      <button\n        onClick={clickedSave}>\n        Save\n      </button>\n    </div>\n  )\n}\n","import React, { useEffect, createContext, useRef } from 'react'\nimport AceEditor from 'react-ace'\n\nimport 'ace-builds/src-noconflict/mode-json'\nimport 'ace-builds/src-noconflict/theme-solarized_dark'\nimport 'ace-builds/src-noconflict/ext-language_tools'\n\nimport { onAuthenticationStateChange, signOut } from '../../authentication'\nimport { checkIsRegistered, getRoomIds, updateRoom } from '../../networking'\nimport reducer, { defaultState, State } from '../reducer'\nimport { useReducerWithThunk } from '../../useReducerWithThunk'\nimport { Action, LoggedInAction, UpdateRoomIds, UpdateAndShowRoomAction } from '../actions'\nimport LoggedOutView from './LoggedOutView'\nimport RoomList from './RoomList'\nimport RoomOptionsView from './RoomOptionsView'\n\nexport const DispatchContext = createContext(null)\n\nconst App = function () {\n  const aceRef = useRef(null)\n\n  const [state, dispatch] = useReducerWithThunk<Action, State>(\n    reducer,\n    defaultState\n  )\n  console.log('In app', state)\n\n  useEffect(() => {\n    // Auth is simple: you log in, we check if you're a mod, and only set the 'logged in' flag if so\n    // I don't think we (currently) care about knowing WHO you are, or connecting to SignalR infra\n    // SignalR may change if we want to enable real-time collab, but WOOF.\n\n    onAuthenticationStateChange(async (user) => {\n      // The shouldVerifyEmail check shouldn't be necessary,\n      // but I'm not convinced we won't have an exploit where someone can make a new account with an existing admin email.\n      // This 20 characters is easier to type than manually testing.\n      if (!user || user.shouldVerifyEmail) {\n        return\n      }\n\n      const { isMod, isBanned } = await checkIsRegistered()\n\n      if (isMod && !isBanned) {\n        dispatch(LoggedInAction())\n      } else {\n        alert(\"You shouldn't have access to this page.\")\n        await signOut()\n        window.location.reload()\n      }\n    })\n  }, [])\n\n  // This could probably previously run in the login useEffect block--\n  // this is gated on firebase.auth() being valid, not state.isLoggedIn\n  // Shrug.\n  useEffect(() => {\n    if (!state.isLoggedIn) return\n    (async () => {\n      const roomIds = await getRoomIds()\n      dispatch(UpdateRoomIds(roomIds))\n    })()\n  }, [state.isLoggedIn])\n\n  const saveRoom = () => {\n    const code = aceRef.current.editor.getValue()\n    updateRoom(state.displayedRoomId, JSON.parse(code))\n  }\n\n  const createRoom = (name: string) => {\n    dispatch(UpdateAndShowRoomAction(name, { displayName: name, shortName: name, id: name, description: '' }))\n  }\n\n  if (state.isLoggedIn) {\n    return (\n      <DispatchContext.Provider value={dispatch}>\n        <div>\n          <h1>Room Editor:  {state.displayedRoomId || 'no room selected'}</h1>\n          <RoomOptionsView roomId={state.displayedRoomId} updateRoom={saveRoom} createRoom={createRoom}/>\n          <RoomList roomIds={state.roomIds}/>\n          <AceEditor\n            mode=\"json\"\n            theme=\"solarized_dark\"\n            name=\"editor\"\n            editorProps={{ $blockScrolling: true }}\n            height={'100%'}\n            ref={aceRef}\n            value={JSON.stringify(state.roomData[state.displayedRoomId] || '', null, 2)}\n            wrapEnabled={true}\n            width={'70vw'}\n          />\n        </div>\n      </DispatchContext.Provider>\n    )\n  } else {\n    return <LoggedOutView />\n  }\n}\n\nexport default App\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\n\nimport App from './components/App'\n\nwindow.addEventListener('DOMContentLoaded', async () => {\n  ReactDOM.render(<App />, document.getElementById('root') as HTMLElement)\n})\n"],"names":["ActionType","$11845bc7a4b454e9f13575b97f05f3f4$export$3a053aceab80ba1a","$11845bc7a4b454e9f13575b97f05f3f4$export$303c81375b3436b9","roomId","roomData","type","UpdateAndShowRoom","value","$83d6bc920f3c6e13fa81a7e8ccb78ab0$export$db8e392eecc8976c","firebaseApp","$5edP6$firebaseapp","initializeApp","$Fqklz","default","FIREBASE_CONFIG","isLoggedIn","$83d6bc920f3c6e13fa81a7e8ccb78ab0$export$9099ad97b570f7c","oldState","action","state","JSON","parse","stringify","LoggedIn","UpdateRoomIds","roomIds","displayedRoomId","$63bdcde8dc24e1d9c28c56b6a00085a0$var$uiConfig","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","user","$3CjRg","currentUser","shouldVerifyEmail","sendSignInLinkToEmail","email","window","location","reload","signInOptions","auth","EmailAuthProvider","PROVIDER_ID","GoogleAuthProvider","TwitterAuthProvider","$5edP6$react","createElement","role","$5edP6$reactfirebaseuiStyledFirebaseAuth","uiConfig","firebaseAuth","props","dispatch","$5edP6$useContext","$980562b6c7c71da4b450e3b0ba3946a8$export$9f652a6947b66421","$5edP6$lodash","sortBy","onClick","async","e","target","getAttribute","$5K3Zs","getRoom","console","log","id","map","key","className","confirm","resetRoomData","getAllRooms","style","marginTop","rooms","roomJSON","a","document","file","Blob","href","URL","createObjectURL","download","click","display","name","prompt","createRoom","deleteRoom","updateRoom","$5edP6$createContext","$980562b6c7c71da4b450e3b0ba3946a8$export$9099ad97b570f7c","aceRef","$5edP6$useRef","$3Evbi","useReducerWithThunk","$5edP6$useEffect","onAuthenticationStateChange","isMod","isBanned","checkIsRegistered","undefined","alert","signOut","getRoomIds","$11845bc7a4b454e9f13575b97f05f3f4$export$4e6cdd6eaae12ad8","Provider","$91b51f5c397c8c4d8fbeaee89b1c5ced$export$9099ad97b570f7c","code","current","editor","getValue","displayName","shortName","description","$2039dac462047fde5ecd1b9cac8caa82$export$9099ad97b570f7c","$5edP6$reactace","mode","theme","editorProps","$blockScrolling","height","ref","wrapEnabled","width","$63bdcde8dc24e1d9c28c56b6a00085a0$export$9099ad97b570f7c","addEventListener","$5edP6$render","$5edP6$createElement","getElementById"],"version":3,"file":"admin.5b85ad07.js.map","sourceRoot":"../"}
{"mappings":"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","sources":["src/authentication.ts","src/networking.ts","src/Actions.ts","src/room.ts","server/src/config.ts","src/modals.ts","src/config.ts","src/useReducerWithThunk.ts"],"sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/auth'\n\nexport function onAuthenticationStateChange (handler: (user: AuthenticatedUser) => void) {\n  firebase.auth().onAuthStateChanged((fbUser: firebase.User) => {\n    const user = firebaseUserToAuthenticatedUser(fbUser)\n    handler(user)\n  })\n}\n\ninterface AuthenticatedUser {\n  displayName: string\n  id: string\n  email: string\n  providerId: string,\n  shouldVerifyEmail: boolean,\n  isSignInWithEmailLink: (location: string) => boolean\n\n  // TODO: We use this property in VerifyEmailView.\n  // I'm not sure if we should just be naively threading it through alongside our\n  // shouldVerifyEmail logic, or if there's a smarter way to unify things\n  emailVerified: boolean,\n}\n\nexport function currentUser (): AuthenticatedUser {\n  return firebaseUserToAuthenticatedUser(firebase.auth().currentUser)\n}\n\nexport function signOut (): Promise<void> {\n  return firebase.auth().signOut()\n}\n\nconst firebaseUserToAuthenticatedUser = (fb: firebase.User): AuthenticatedUser | undefined => {\n  if (!fb) return undefined\n\n  const shouldVerifyEmail = fb.providerData &&\n    fb.providerData.length === 1 &&\n    fb.providerData[0].providerId === 'password' &&\n    !fb.emailVerified\n\n  return {\n    id: fb.uid,\n    displayName: fb.displayName,\n    email: fb.email,\n    emailVerified: fb.emailVerified,\n    providerId: fb.providerId,\n    shouldVerifyEmail,\n    isSignInWithEmailLink: (location: string) => {\n      return firebase.auth().isSignInWithEmailLink(location)\n    }\n  }\n}\n\nexport function sendSignInLinkToEmail (email: string) {\n  const actionCodeSettings = {\n    // This URL should be changed to the frontend location for production. It must also be added to the authorized\n    // domains list in the Firebase Console.\n    url: window.location.href,\n    // This must be true, you'll get an error if it's not.\n    handleCodeInApp: true\n  }\n\n  firebase.auth().sendSignInLinkToEmail(email, actionCodeSettings).then(() => {\n    console.log(`Sign-in email sent to ${email}!`)\n  })\n}\n","import * as SignalR from '@aspnet/signalr'\nimport { v4 as uuid } from 'uuid'\n\nimport { RoomResponse, ErrorResponse, ServerSettings } from '../server/src/types'\nimport { Dispatch } from 'react'\nimport {\n  Action,\n  ErrorAction,\n  PlayerConnectedAction,\n  PlayerDisconnectedAction,\n  ChatMessageAction,\n  PlayerEnteredAction,\n  WhisperAction,\n  PlayerLeftAction,\n  ShoutAction,\n  EmoteAction,\n  DanceAction,\n  ShowProfileAction,\n  UserMapAction,\n  ModMessageAction,\n  UpdatedCurrentRoomAction,\n  UpdatedRoomDataAction,\n  UpdatedPresenceAction,\n  ReceivedMyProfileAction,\n  DeleteMessageAction,\n  NoteAddAction,\n  NoteRemoveAction,\n  NoteUpdateRoomAction,\n  NoteUpdateLikesAction,\n  HideModalAction,\n  SpaceOpenedOrClosedAction,\n  PlayerBannedAction,\n  PlayerUnbannedAction,\n  ReceivedServerSettingsAction,\n  ShowModalAction, CommandMessageAction, CaptionMessageAction\n} from './Actions'\nimport { User } from '../server/src/user'\nimport { convertServerRoomData, Room } from './room'\nimport { MESSAGE_MAX_LENGTH } from '../server/src/config'\nimport { Modal } from './modals'\nimport Config from './config'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nconst axios = require('axios').default\n\nlet myUserId: string\nlet myDispatch: Dispatch<Action>\n\nconst inMediaChat: boolean = false\n\nexport async function connect (userId: string, dispatch: Dispatch<Action>) {\n  myUserId = userId\n  myDispatch = dispatch\n\n  const result: RoomResponse = await callAzureFunction('connect')\n\n  console.log(result)\n  dispatch(UpdatedCurrentRoomAction(result.roomId, convertServerRoomData(result.roomData)))\n  dispatch(UserMapAction(result.users))\n\n  if (result.profile) {\n    dispatch(ReceivedMyProfileAction(result.profile))\n  }\n\n  if (result.roomNotes) {\n    dispatch(NoteUpdateRoomAction(result.roomId, result.roomNotes))\n  }\n\n  dispatch(UpdatedPresenceAction(result.presenceData))\n\n  connectSignalR(userId, dispatch)\n}\n\nexport async function disconnect (userId: string) {\n  const result = await callAzureFunction('disconnect')\n}\n\nexport async function getServerSettings (dispatch: Dispatch<Action>) {\n  const result: ServerSettings = await callAzureFunctionGet('serverSettings')\n  dispatch(ReceivedServerSettingsAction(result))\n}\n\nexport async function updateServerSettings (serverSettings: ServerSettings) {\n  const result = await callAzureFunction('serverSettings', serverSettings)\n  if (result) {\n    myDispatch(HideModalAction())\n  }\n}\n\nexport async function resetRoomData () {\n  const response = await callAzureFunction('resetRoomData')\n  if (response.roomData) {\n    myDispatch(UpdatedRoomDataAction(convertServerRoomData(response.roomData)))\n  }\n}\n\n// If isNewUser is true, a successful update will refresh the entire page instead of dismissing a modal\nexport async function updateProfile (user: Partial<User>, isNew: boolean) {\n  const result = await callAzureFunction('updateProfile', { user, isNew })\n  if (result.valid) {\n    if (isNew) {\n      window.location.reload()\n    } else {\n      myDispatch(ReceivedMyProfileAction(result.user))\n      myDispatch(HideModalAction())\n    }\n  } else if (result.error) {\n    alert(result.error)\n  }\n}\n\nexport async function updateProfileColor (userId: string, color: string) {\n  const result = await callAzureFunction('updateProfileColor', { userId: userId, color: color })\n}\n\nexport async function updateFontReward (userId: string, font: string) {\n  const result = await callAzureFunction('updateFontReward', { userId: userId, font: font })\n}\n\nexport async function checkIsRegistered (): Promise<{registeredUsername: string, spaceIsClosed: boolean, isMod: string, isBanned: boolean}> {\n  const result = await callAzureFunction('isRegistered')\n  return { registeredUsername: result.registered, spaceIsClosed: result.spaceIsClosed, isMod: result.isMod, isBanned: result.isBanned }\n}\n\nexport async function pickUpRandomItemFromList (listName: string) {\n  await callAzureFunction('pickUpItem', { list: listName })\n}\n\nexport async function pickUpItem (item: string) {\n  await callAzureFunction('pickUpItem', { item })\n}\n\nexport async function dropItem () {\n  await callAzureFunction('pickUpItem', { drop: true })\n}\n\nexport async function displayMessage (message: string) {\n  await callAzureFunction('displayMessage', { message: message })\n}\n\nexport async function displayMessageFromList (listName: string) {\n  await callAzureFunction('displayMessage', { list: listName })\n}\n\nexport async function fetchTwilioToken () {\n  return await callAzureFunction('twilioToken')\n}\n\nexport async function fetchCognitiveServicesKey () {\n  return await callAzureFunction('cognitiveServicesKey')\n}\n\n// Post-it notes\n\nexport async function addNoteToWall (message: string) {\n  if (message !== null && message.length > 0) {\n    const id = uuid()\n    await callAzureFunction('addRoomNote', { id, message })\n  }\n}\n\nexport async function deleteRoomNote (noteId: string) {\n  await callAzureFunction('deleteRoomNote', { noteId })\n}\n\nexport async function likeRoomNote (noteId: string) {\n  await callAzureFunction('likeRoomNote', { noteId, like: true })\n}\n\nexport async function unlikeRoomNote (noteId: string) {\n  await callAzureFunction('likeRoomNote', { noteId, like: false })\n}\n\n//\n\nexport async function openOrCloseSpace (spaceIsClosed) {\n  await callAzureFunction('openOrCloseSpace', { spaceIsClosed })\n}\n\n//\n\nexport async function moveToRoom (roomId: string) {\n  const result: RoomResponse | ErrorResponse | any = await callAzureFunction(\n    'moveRoom',\n    {\n      to: roomId\n    }\n  )\n\n  console.log(result)\n\n  if (result.error) {\n    myDispatch(ErrorAction(result.error))\n  } else {\n    myDispatch(UpdatedCurrentRoomAction(result.roomId, convertServerRoomData(result.roomData)))\n\n    if (result.roomNotes) {\n      myDispatch(NoteUpdateRoomAction(result.roomId, result.roomNotes))\n    }\n  }\n}\n\nexport async function sendChatMessage (id: string, text: string) {\n  // If it's over the character limit\n  if (text.length > MESSAGE_MAX_LENGTH) {\n    console.log(`Sorry, can't send messages over ${MESSAGE_MAX_LENGTH} characters!`)\n    return\n  }\n\n  const result: RoomResponse | Error | any = await callAzureFunction(\n    'sendChatMessage',\n    {\n      id: id,\n      text: text\n    }\n  )\n\n  console.log(result)\n\n  // If it's a /move command\n  if (result && result.roomId) {\n    myDispatch(UpdatedCurrentRoomAction(result.roomId, convertServerRoomData(result.roomData)))\n  } else if (result && result.user) {\n    myDispatch(ShowProfileAction(result.user))\n  } else if (result && result.error) {\n    myDispatch(ErrorAction(result.error))\n  }\n}\n\nexport async function sendCaption (id: string, text: string) {\n  // TODO: This may or may not be problematic\n  if (text.length > MESSAGE_MAX_LENGTH) {\n    console.log(`Sorry, can't send messages over ${MESSAGE_MAX_LENGTH} characters!`)\n    return\n  }\n\n  const result: RoomResponse | Error | any = await callAzureFunction(\n    'sendCaption',\n    {\n      id: id,\n      text: text\n    }\n  )\n\n  console.log(result)\n\n  if (result && result.error) {\n    myDispatch(ErrorAction(result.error))\n  }\n}\n\nexport async function fetchProfile (userId: string) {\n  const result = await callAzureFunction('fetchProfile', { userId })\n  if (result.error) {\n    console.log('Could not fetch profile', result.erroc)\n  } else {\n    myDispatch(ShowProfileAction(result.user))\n  }\n}\n\nexport async function toggleUserBan (userId: string) {\n  const result = await callAzureFunction('banUser', { userId })\n}\n\nexport async function toggleUserMod (userId: string) {\n  const result = await callAzureFunction('toggleModStatus', { userId })\n}\n\nexport async function deleteMessage (messageId: string) {\n  const result = await callAzureFunction('deleteMessage', { messageId })\n}\n\nexport async function getRoomIds (): Promise<string[]> {\n  const result = await callAzureFunction('getRoomIds')\n  if (result.roomIds) {\n    return result.roomIds\n  }\n}\n\nexport async function getRoom (roomId: string): Promise<Room> {\n  const result = await callAzureFunction('getRoom', { roomId })\n  if (result.room) {\n    return result.room\n  }\n}\n\nexport async function getAllRooms (): Promise<{[roomId: string]: Room}> {\n  const result = await callAzureFunction('getAllRooms')\n  if (result.roomData) {\n    return result.roomData\n  }\n}\n\nexport async function deleteRoom (roomId: string): Promise<any> {\n  return await callAzureFunction('deleteRoom', { roomId })\n}\n\nexport async function updateRoom (roomId: string, roomData: Room): Promise<any> {\n  return await callAzureFunction('updateRoom', { roomId, roomData })\n}\n\n// Setup\n\nasync function connectSignalR (userId: string, dispatch: Dispatch<Action>) {\n  class CustomHttpClient extends SignalR.DefaultHttpClient {\n    public async send (request: SignalR.HttpRequest): Promise<SignalR.HttpResponse> {\n      const firebaseToken = await firebase.auth().currentUser.getIdToken(false)\n      request.headers = {\n        ...request.headers,\n        userid: firebase.auth().currentUser.uid\n      }\n      return super.send(request)\n    }\n  }\n\n  const connection = new SignalR.HubConnectionBuilder()\n    .withUrl(`${Config.SERVER_HOSTNAME}/api`, {\n      httpClient: new CustomHttpClient(console)\n    })\n    .configureLogging(SignalR.LogLevel.Debug)\n    .build()\n\n  connection.on('playerConnected', (user) => {\n    console.log('Player joined!', user)\n\n    dispatch(PlayerConnectedAction(user))\n  })\n\n  connection.on('playerDisconnected', (otherId) => {\n    console.log('Player left!', otherId)\n    dispatch(PlayerDisconnectedAction(otherId))\n  })\n\n  connection.on('presenceData', (data) => {\n    dispatch(UpdatedPresenceAction(data))\n  })\n\n  // We use otherId/name basically interchangably here.\n  connection.on('chatMessage', (messageId, otherId, message) => {\n    console.log('Received chat', otherId, message)\n    console.log(otherId, message, userId)\n    if (otherId === userId) return\n\n    dispatch(ChatMessageAction(messageId, otherId, message))\n  })\n\n  connection.on('caption', (messageId, otherId, message) => {\n    console.log('Received caption', otherId, message)\n    console.log(otherId, message, userId)\n    if (otherId === userId) return\n\n    dispatch(CaptionMessageAction(messageId, otherId, message))\n  })\n\n  connection.on('mods', (otherId, message) => {\n    dispatch(ModMessageAction(otherId, message))\n  })\n\n  connection.on('deleteMessage', (modId, targetMessageId) => {\n    dispatch(DeleteMessageAction(modId, targetMessageId))\n  })\n\n  connection.on('playerEntered', (name, fromId, fromName) => {\n    if (name === userId) return\n    dispatch(PlayerEnteredAction(name, fromId, fromName))\n  })\n\n  connection.on('myProfile', (profile) => {\n    dispatch(ReceivedMyProfileAction(profile))\n  })\n\n  connection.on('serverSettings', (serverSettings) => {\n    dispatch(ReceivedServerSettingsAction(serverSettings))\n  })\n\n  connection.on('whisper', (otherId, message) => {\n    dispatch(WhisperAction(otherId, message))\n  })\n\n  connection.on('privateCommand', (message) => {\n    dispatch(CommandMessageAction(message))\n  })\n\n  connection.on('privateItemPickup', (message) => {\n    dispatch(CommandMessageAction(message))\n  })\n\n  connection.on('playerLeft', (name, toId, toName) => {\n    if (name === userId) return\n    dispatch(PlayerLeftAction(name, toId, toName))\n  })\n\n  connection.on('usernameMap', (map) => {\n    console.log('Received map', map)\n    dispatch(UserMapAction(map))\n  })\n\n  connection.on('playerBanned', (user) => {\n    dispatch(PlayerBannedAction(user))\n  })\n\n  connection.on('playerUnbanned', (user) => {\n    dispatch(PlayerUnbannedAction(user))\n  })\n\n  connection.on('clientDeployed', () => {\n    dispatch(ShowModalAction(Modal.ClientDeployed))\n  })\n\n  connection.on('shout', (messageId, name, message) => {\n    // We don't gate on your own userId here.\n    // Because shouting can fail at the server level, we don't show it preemptively.\n    dispatch(ShoutAction(messageId, name, message))\n  })\n\n  connection.on('emote', (messageId, name, message) => {\n    dispatch(EmoteAction(messageId, name, message))\n  })\n\n  connection.on('dance', (messageId, name, message) => {\n    dispatch(DanceAction(messageId, name, message))\n  })\n\n  // Post-It Note Wall\n  connection.on('noteAdded', (roomId, noteId, message, authorId) => {\n    dispatch(NoteAddAction(roomId, { id: noteId, message, authorId }))\n  })\n\n  connection.on('noteRemoved', (roomId, noteId) => {\n    dispatch(NoteRemoveAction(roomId, noteId))\n  })\n\n  connection.on('noteLikesUpdated', (roomId, noteId, likes) => {\n    dispatch(NoteUpdateLikesAction(roomId, noteId, likes))\n  })\n\n  connection.on('spaceOpenedOrClosed', (status) => {\n    dispatch(SpaceOpenedOrClosedAction(status))\n  })\n\n  connection.onclose(() => {\n    console.log('disconnected')\n    callAzureFunction('disconnect')\n  })\n\n  connection.on('ping', () => {\n    console.log('Received heartbeat ping')\n    callAzureFunction('pong')\n  })\n\n  window.addEventListener('beforeunload', (e) => {\n    callAzureFunction('disconnect')\n  })\n\n  console.log('connecting...')\n  return await connection\n    .start()\n    .then(() => {\n      console.log('Connected!')\n    })\n    .catch(console.error)\n}\n\nasync function callAzureFunctionGet (endpoint: string): Promise<any> {\n  try {\n    const firebaseToken = await firebase.auth().currentUser.getIdToken(false)\n    const r = await axios.get(\n      `${Config.SERVER_HOSTNAME}/api/${endpoint}`,\n      {\n        withCredentials: true,\n        headers: {\n          Authorization: `Bearer ${firebaseToken}`\n        }\n      }\n    )\n    console.log(r)\n    return r.data\n  } catch (e) {\n    console.log('Error', e)\n    return undefined\n  }\n}\n\nasync function callAzureFunction (endpoint: string, body?: any): Promise<any> {\n  try {\n    const firebaseToken = await firebase.auth().currentUser.getIdToken(false)\n    const r = await axios.post(\n      `${Config.SERVER_HOSTNAME}/api/${endpoint}`,\n      body,\n      {\n        withCredentials: true,\n        headers: {\n          Authorization: `Bearer ${firebaseToken}`\n        }\n      }\n    )\n    console.log(r)\n    return r.data\n  } catch (e) {\n    console.log('Error', e)\n    return undefined\n  }\n}\n","import { PublicUser, MinimalUser } from '../server/src/user'\nimport { Room } from './room'\nimport { Message, WhisperMessage } from './message'\nimport { RoomNote } from '../server/src/roomNote'\nimport { Modal } from './modals'\nimport { ServerSettings } from '../server/src/types'\nimport { ModalOptions } from './reducer'\n\nexport type Action =\n  | ReceivedMyProfileAction\n  | ReceivedServerSettingsAction\n  | UpdatedCurrentRoomAction\n  | UpdatedRoomDataAction\n  | UpdatedPresenceAction\n  | PlayerConnectedAction\n  | PlayerDisconnectedAction\n  | ChatMessageAction\n  | CaptionMessageAction\n  | ModMessageAction\n  | DeleteMessageAction\n  | LoadMessageArchiveAction\n  | WhisperAction\n  | ShoutAction\n  | EmoteAction\n  | DanceAction\n  | PlayerEnteredAction\n  | PlayerLeftAction\n  | UserMapAction\n  | PlayerBannedAction\n  | PlayerUnbannedAction\n  | UpdateProfileColorAction\n  | MediaReceivedSpeakingDataAction\n  | StopVideoChatAction\n  | StartVideoChatAction\n  | ErrorAction\n  | RefreshReactAction\n  | SendMessageAction\n  | SendCaptionAction\n  | SetNameAction\n  | StartWhisperAction\n  | ShowProfileAction\n  | ShowModalAction\n  | ShowModalWithOptionsAction\n  | AuthenticateAction\n  | IsRegisteredAction\n  | BanToggleAction\n  | ModToggleAction\n  | NoteAddAction\n  | NoteRemoveAction\n  | NoteUpdateLikesAction\n  | NoteUpdateRoomAction\n  | HideModalAction\n  | HideProfileAction\n  | ShowSideMenuAction\n  | HideSideMenuAction\n  | DeactivateAutoscrollAction\n  | ActivateAutoscrollAction\n  | SetUseSimpleNamesAction\n  | SetKeepCameraWhenMovingAction\n  | SetTextOnlyModeAction\n  | SetAudioOnlyModeAction\n  | SetNumberOfFacesAction\n  | SetCaptionsEnabledAction\n  | SpaceIsClosedAction\n  | SpaceOpenedOrClosedAction\n  | CommandMessageAction\n  | UpdateFontRewardAction\n\nexport enum ActionType {\n  // Server-driven action\n  ReceivedMyProfile = 'RECEIVED_MY_PROFILE',\n  ReceivedServerSettings = 'RECEIVED_SERVER_SETTINGS',\n  UpdatedCurrentRoom = 'UPDATED_CURRENT_ROOM',\n  UpdatedRoomData = 'UPDATED_ROOM_DATA',\n  UpdatedPresence = 'UPDATED_PRESENCE',\n  PlayerConnected = 'PLAYER_CONNECTED',\n  PlayerDisconnected = 'PLAYER_DISCONNECTED',\n  ChatMessage = 'CHAT_MESSAGE',\n  CaptionMessage = 'CAPTION_MESSAGE',\n  ModMessage = 'MOD_MESSAGE',\n  DeleteMessage = 'DELETE_MESSAGE',\n  Whisper = 'WHISPER',\n  Shout = 'SHOUT',\n  Emote = 'EMOTE',\n  Dance = 'DANCE',\n  PlayerEntered = 'PLAYER_ENTERED',\n  PlayerLeft = 'PLAYER_LEFT',\n  Error = 'ERROR',\n  UserMap = 'USER_MAP',\n  PlayerBanned = 'PLAYER_BANNED',\n  PlayerUnbanned = 'PLAYER_UNBANNED',\n  UpdateProfileColor = 'UPDATE_PROFILE_COLOR',\n  UpdateFontReward = 'UPDATE_FONT_REWARD',\n  // WebRTC\n  StopVideoChat = 'STOP_VIDEO_CHAT',\n  StartVideoChat = 'START_VIDEO_CHAT',\n  MediaReceivedSpeakingData = 'MEDIA_RECEIVED_SPEAKING_DATA',\n  // UI actions\n  RefreshReact = 'REFRESH_REACT',\n  SendMessage = 'SEND_MESSAGE',\n  SendCaption = 'SEND_CAPTION',\n  SetName = 'SET_NAME',\n  StartWhisper = 'START_WHISPER',\n  ShowProfile = 'SHOW_PROFILE',\n  HideProfile = 'HIDE_PROFILE',\n  ShowModal = 'SHOW_MODAL',\n  ShowModalWithOptions = 'SHOW_MODAL_WITH_OPTIONS',\n  ShowSideMenu = 'SHOW_SIDE_MENU',\n  HideSideMenu = 'HIDE_SIDE_MENU',\n  DeactivateAutoscroll = 'DEACTIVATE_AUTOSCROLL',\n  ActivateAutoscroll = 'ACTIVATE_AUTOSCROLL',\n  SetUseSimpleNames = 'SET_USE_SIMPLE_NAMES',\n  SetKeepCameraWhenMoving = 'SET_KEEP_CAMERA_WHEN_MOVING',\n  SetTextOnlyMode = 'SET_TEXT_ONLY_MODE',\n  SetAudioOnlyMode = 'SET_AUDIO_ONLY_MODE',\n  SetNumberOfFaces = 'SET_NUMBER_OF_FACES',\n  SetCaptionsEnabled = 'SET_CAPTIONS_ENABLED',\n  //\n  Authenticate = 'AUTHENTICATE',\n  IsRegistered = 'IS_REGISTERED',\n  BanToggle = 'BAN_TOGGLE',\n  ModToggle = 'MOD_TOGGLE',\n  LoadMessageArchive = 'LOAD_MESSAGE_ARCHIVE',\n  // Note Wall\n  NoteAdd = 'NOTE_ADD',\n  NoteRemove = 'NOTE_REMOVE',\n  NoteUpdateLikes = 'NOTE_UPDATE_LIKES',\n  NoteUpdateRoom = 'NOTE_UPDATE_ROOM',\n  HideModalAction = 'HIDE_MODAL',\n\n  SpaceIsClosed = 'SPACE_IS_CLOSED',\n  SpaceOpenedOrClosed = 'SPACE_OPENED_OR_CLOSED',\n\n  CommandMessage = 'COMMAND_MESSAGE'\n}\n\ninterface ReceivedMyProfileAction {\n  type: ActionType.ReceivedMyProfile;\n  value: PublicUser;\n}\n\nexport const ReceivedMyProfileAction = (\n  user: PublicUser\n): ReceivedMyProfileAction => {\n  return {\n    type: ActionType.ReceivedMyProfile,\n    value: user\n  }\n}\n\ninterface ReceivedServerSettingsAction {\n  type: ActionType.ReceivedServerSettings;\n  value: ServerSettings;\n}\n\nexport const ReceivedServerSettingsAction = (\n  serverSettings: ServerSettings\n): ReceivedServerSettingsAction => {\n  return {\n    type: ActionType.ReceivedServerSettings,\n    value: serverSettings\n  }\n}\n\ninterface UpdatedCurrentRoomAction {\n  type: ActionType.UpdatedCurrentRoom;\n  value: {\n    roomId: string,\n    roomData: {[roomId: string]: Room}\n  };\n}\n\nexport const UpdatedCurrentRoomAction = (\n  roomId: string,\n  roomData: {[roomId: string]: Room}\n): UpdatedCurrentRoomAction => {\n  return {\n    type: ActionType.UpdatedCurrentRoom,\n    value: { roomId, roomData }\n  }\n}\n\ninterface UpdatedRoomDataAction {\n  type: ActionType.UpdatedRoomData;\n  value: { [roomId: string]: Room };\n}\n\nexport const UpdatedRoomDataAction = (roomData: {\n  [roomId: string]: Room;\n}): UpdatedRoomDataAction => {\n  return {\n    type: ActionType.UpdatedRoomData,\n    value: roomData\n  }\n}\n\ninterface UpdatedPresenceAction {\n  type: ActionType.UpdatedPresence;\n  value: { [roomId: string]: string[] };\n}\n\nexport const UpdatedPresenceAction = (data: {\n  [roomId: string]: string[];\n}): UpdatedPresenceAction => {\n  return {\n    type: ActionType.UpdatedPresence,\n    value: data\n  }\n}\n\ninterface PlayerConnectedAction {\n  type: ActionType.PlayerConnected;\n  value: MinimalUser;\n}\n\nexport const PlayerConnectedAction = (\n  user: MinimalUser\n): PlayerConnectedAction => {\n  return {\n    type: ActionType.PlayerConnected,\n    value: user\n  }\n}\n\ninterface PlayerDisconnectedAction {\n  type: ActionType.PlayerDisconnected;\n  value: string;\n}\n\nexport const PlayerDisconnectedAction = (\n  name: string\n): PlayerDisconnectedAction => {\n  return {\n    type: ActionType.PlayerDisconnected,\n    value: name\n  }\n}\n\ninterface ChatMessageAction {\n  type: ActionType.ChatMessage;\n  value: {\n    messageId: string;\n    name: string;\n    message: string;\n  };\n}\n\nexport const ChatMessageAction = (\n  messageId: string,\n  name: string,\n  message: string\n): ChatMessageAction => {\n  return {\n    type: ActionType.ChatMessage,\n    value: { messageId, name, message }\n  }\n}\n\ninterface CaptionMessageAction {\n  type: ActionType.CaptionMessage;\n  value: {\n    messageId: string;\n    name: string;\n    message: string;\n  };\n}\n\nexport const CaptionMessageAction = (\n  messageId: string,\n  name: string,\n  message: string\n): CaptionMessageAction => {\n  return {\n    type: ActionType.CaptionMessage,\n    value: { messageId, name, message }\n  }\n}\n\ninterface WhisperAction {\n  type: ActionType.Whisper;\n  value: {\n    name: string;\n    message: string;\n  };\n}\n\nexport const WhisperAction = (name: string, message: string): WhisperAction => {\n  return {\n    type: ActionType.Whisper,\n    value: { name, message }\n  }\n}\n\ninterface ModMessageAction {\n  type: ActionType.ModMessage;\n  value: {\n    name: string;\n    message: string;\n  };\n}\n\nexport const ModMessageAction = (\n  name: string,\n  message: string\n): ModMessageAction => {\n  return {\n    type: ActionType.ModMessage,\n    value: { name, message }\n  }\n}\n\ninterface DeleteMessageAction {\n  type: ActionType.DeleteMessage;\n  value: {\n    modId: string;\n    targetMessageId: string;\n  }\n}\n\nexport const DeleteMessageAction = (\n  modId: string,\n  targetMessageId: string\n): DeleteMessageAction => {\n  return {\n    type: ActionType.DeleteMessage,\n    value: { modId, targetMessageId }\n  }\n}\n\nexport const ShoutAction = (messageId: string, name: string, message: string): ShoutAction => {\n  return {\n    type: ActionType.Shout,\n    value: { messageId, name, message }\n  }\n}\n\ninterface ShoutAction {\n  type: ActionType.Shout;\n  value: {\n    messageId: string;\n    name: string;\n    message: string;\n  };\n}\n\ninterface EmoteAction {\n  type: ActionType.Emote;\n  value: {\n    messageId: string;\n    name: string;\n    message: string;\n  }\n}\n\nexport const EmoteAction = (messageId: string, name: string, message: string): EmoteAction => {\n  return {\n    type: ActionType.Emote,\n    value: { messageId, name, message }\n  }\n}\n\ninterface DanceAction {\n  type: ActionType.Dance;\n  value: {\n    messageId: string;\n    name: string;\n    message: string;\n  }\n}\n\nexport const DanceAction = (messageId: string, name: string, message: string): DanceAction => {\n  return {\n    type: ActionType.Dance,\n    value: { messageId, name, message }\n  }\n}\n\ninterface PlayerEnteredAction {\n  type: ActionType.PlayerEntered;\n  value: {\n    name: string;\n    fromId: string;\n    fromName: string;\n  };\n}\n\nexport const PlayerEnteredAction = (\n  name: string,\n  fromId: string,\n  fromName: string\n): PlayerEnteredAction => {\n  return {\n    type: ActionType.PlayerEntered,\n    value: { name, fromId, fromName }\n  }\n}\n\ninterface PlayerLeftAction {\n  type: ActionType.PlayerLeft;\n  value: {\n    name: string;\n    toId: string;\n    toName: string;\n  };\n}\n\nexport const PlayerLeftAction = (\n  name: string,\n  toId: string,\n  toName: string\n): PlayerLeftAction => {\n  return {\n    type: ActionType.PlayerLeft,\n    value: { name, toId, toName }\n  }\n}\n\ninterface UserMapAction {\n  type: ActionType.UserMap;\n  value: { [userId: string]: MinimalUser };\n}\n\nexport const UserMapAction = (map: {\n  [userId: string]: MinimalUser;\n}): UserMapAction => {\n  return {\n    type: ActionType.UserMap,\n    value: map\n  }\n}\n\ninterface PlayerBannedAction {\n  type: ActionType.PlayerBanned;\n  value: MinimalUser;\n}\n\nexport const PlayerBannedAction = (user: MinimalUser): PlayerBannedAction => {\n  return {\n    type: ActionType.PlayerBanned,\n    value: user\n  }\n}\n\ninterface PlayerUnbannedAction {\n  type: ActionType.PlayerUnbanned;\n  value: MinimalUser;\n}\n\nexport const PlayerUnbannedAction = (user: MinimalUser): PlayerUnbannedAction => {\n  return {\n    type: ActionType.PlayerUnbanned,\n    value: user\n  }\n}\n\ninterface UpdateProfileColorAction {\n  type: ActionType.UpdateProfileColor,\n  color: string\n}\n\nexport const UpdateProfileColorAction = (color: string): UpdateProfileColorAction => {\n  return {\n    type: ActionType.UpdateProfileColor,\n    color: color\n  }\n}\n\ninterface UpdateFontRewardAction {\n  type: ActionType.UpdateFontReward,\n  font: string\n}\n\nexport const UpdateFontRewardAction = (font: string): UpdateFontRewardAction => {\n  return {\n    type: ActionType.UpdateFontReward,\n    font: font\n  }\n}\n\ninterface MediaReceivedSpeakingDataAction {\n  type: ActionType.MediaReceivedSpeakingData;\n  value: string;\n}\n\nexport const MediaReceivedSpeakingDataAction = (\n  participantId: string\n): MediaReceivedSpeakingDataAction => {\n  return {\n    type: ActionType.MediaReceivedSpeakingData,\n    value: participantId\n  }\n}\n\ninterface StopVideoChatAction {\n  type: ActionType.StopVideoChat;\n}\n\nexport const StopVideoChatAction = (): StopVideoChatAction => {\n  return { type: ActionType.StopVideoChat }\n}\n\ninterface StartVideoChatAction {\n  type: ActionType.StartVideoChat;\n}\n\nexport const StartVideoChatAction = (): StartVideoChatAction => {\n  return { type: ActionType.StartVideoChat }\n}\n\ninterface ErrorAction {\n  type: ActionType.Error;\n  value: string;\n}\n\nexport const ErrorAction = (error: string): ErrorAction => {\n  return {\n    type: ActionType.Error,\n    value: error\n  }\n}\n\n// UI Actions\n\n// HACK ALERT: Used to force a re-render, but ideally the data relevant to the re-render should be tied to the action.\n// Used right now because of timing issues in room presence between the client state and Twilio.\ninterface RefreshReactAction {\n  type: ActionType.RefreshReact;\n}\n\nexport const RefreshReactAction = (): RefreshReactAction => {\n  return {\n    type: ActionType.RefreshReact\n  }\n}\n\ninterface SendMessageAction {\n  type: ActionType.SendMessage;\n  value: string;\n}\n\nexport const SendCaptionAction = (message: string): SendCaptionAction => {\n  return {\n    type: ActionType.SendCaption,\n    value: message\n  }\n}\ninterface SendCaptionAction {\n  type: ActionType.SendCaption;\n  value: string;\n}\n\nexport const SendMessageAction = (message: string): SendMessageAction => {\n  return {\n    type: ActionType.SendMessage,\n    value: message\n  }\n}\n\ninterface SetNameAction {\n  type: ActionType.SetName;\n  value: string;\n}\n\nexport const SetNameAction = (name: string): SetNameAction => {\n  return {\n    type: ActionType.SetName,\n    value: name\n  }\n}\n\ninterface StartWhisperAction {\n  type: ActionType.StartWhisper;\n  value: string;\n}\n\nexport const StartWhisperAction = (name: string): StartWhisperAction => {\n  return { type: ActionType.StartWhisper, value: name }\n}\n\ninterface HideProfileAction {\n  type: ActionType.HideProfile;\n}\n\nexport const HideProfileAction = (): HideProfileAction => {\n  return { type: ActionType.HideProfile }\n}\n\ninterface ShowProfileAction {\n  type: ActionType.ShowProfile;\n  value: PublicUser;\n}\n\nexport const ShowProfileAction = (\n  user: PublicUser\n): ShowProfileAction => {\n  return {\n    type: ActionType.ShowProfile,\n    value: user\n  }\n}\n\ninterface ShowModalAction {\n  type: ActionType.ShowModal;\n  value: Modal\n}\n\nexport const ShowModalAction = (modal: Modal): ShowModalAction => {\n  return {\n    type: ActionType.ShowModal,\n    value: modal\n  }\n}\n\ninterface ShowModalWithOptionsAction {\n  type: ActionType.ShowModalWithOptions;\n  value: {\n    modal: Modal,\n    options: ModalOptions\n  }\n}\n\nexport const ShowModalWithOptionsAction = (modal: Modal, options: ModalOptions): ShowModalWithOptionsAction => {\n  return {\n    type: ActionType.ShowModalWithOptions,\n    value: { modal, options }\n  }\n}\n\ninterface HideModalAction {\n  type: ActionType.HideModalAction;\n}\n\nexport const HideModalAction = (): HideModalAction => {\n  return { type: ActionType.HideModalAction }\n}\n\ninterface AuthenticateAction {\n  type: ActionType.Authenticate;\n  value: { name: string; userId: string, provider: string, mustVerifyEmail: boolean };\n}\n\ninterface ShowSideMenuAction {\n  type: ActionType.ShowSideMenu;\n}\n\nexport const ShowSideMenuAction = (): ShowSideMenuAction => {\n  return { type: ActionType.ShowSideMenu }\n}\n\ninterface HideSideMenuAction {\n  type: ActionType.HideSideMenu;\n}\n\nexport const HideSideMenuAction = (): HideSideMenuAction => {\n  return { type: ActionType.HideSideMenu }\n}\n\ninterface DeactivateAutoscrollAction {\n  type: ActionType.DeactivateAutoscroll;\n}\n\nexport const DeactivateAutoscrollAction = (): DeactivateAutoscrollAction => {\n  return { type: ActionType.DeactivateAutoscroll }\n}\n\ninterface ActivateAutoscrollAction {\n  type: ActionType.ActivateAutoscroll;\n}\n\nexport const ActivateAutoscrollAction = (): ActivateAutoscrollAction => {\n  return { type: ActionType.ActivateAutoscroll }\n}\n\ninterface SetUseSimpleNamesAction {\n  type: ActionType.SetUseSimpleNames;\n  value: boolean;\n}\n\nexport const SetUseSimpleNamesAction = (\n  useSimpleNames: boolean\n): SetUseSimpleNamesAction => {\n  return { type: ActionType.SetUseSimpleNames, value: useSimpleNames }\n}\n\ninterface SetKeepCameraWhenMovingAction {\n  type: ActionType.SetKeepCameraWhenMoving;\n  value: boolean;\n}\n\nexport const SetKeepCameraWhenMovingAction = (\n  keepCameraWhenMoving: boolean\n): SetKeepCameraWhenMovingAction => {\n  return { type: ActionType.SetKeepCameraWhenMoving, value: keepCameraWhenMoving }\n}\n\ninterface SetTextOnlyModeAction {\n  type: ActionType.SetTextOnlyMode;\n  textOnlyMode: boolean;\n  refresh: boolean;\n}\n\nexport const SetTextOnlyModeAction = (\n  textOnlyMode: boolean,\n  refresh: boolean\n): SetTextOnlyModeAction => {\n  return { type: ActionType.SetTextOnlyMode, textOnlyMode: textOnlyMode, refresh: refresh }\n}\n\ninterface SetAudioOnlyModeAction {\n  type: ActionType.SetAudioOnlyMode;\n  value: boolean;\n}\n\nexport const SetAudioOnlyModeAction = (\n  enable: boolean\n): SetAudioOnlyModeAction => {\n  return {\n    type: ActionType.SetAudioOnlyMode,\n    value: enable\n  }\n}\ninterface SetCaptionsEnabledAction {\n  type: ActionType.SetCaptionsEnabled;\n  value: boolean;\n}\n\nexport const SetCaptionsEnabledAction = (\n  enable: boolean\n): SetCaptionsEnabledAction => {\n  return {\n    type: ActionType.SetCaptionsEnabled,\n    value: enable\n  }\n}\n\ninterface SetNumberOfFacesAction {\n  type: ActionType.SetNumberOfFaces;\n  value: number;\n}\n\nexport const SetNumberOfFacesAction = (num: number): SetNumberOfFacesAction => {\n  return {\n    type: ActionType.SetNumberOfFaces,\n    value: num\n  }\n}\n\nexport const AuthenticateAction = (\n  userId: string | undefined,\n  name: string | undefined,\n  provider: string | undefined,\n  mustVerifyEmail: boolean | undefined\n): AuthenticateAction => {\n  return { type: ActionType.Authenticate, value: { userId, name, provider, mustVerifyEmail } }\n}\n\ninterface IsRegisteredAction {\n  type: ActionType.IsRegistered;\n}\n\nexport const IsRegisteredAction = (): IsRegisteredAction => {\n  return { type: ActionType.IsRegistered }\n}\n\ninterface BanToggleAction {\n  type: ActionType.BanToggle;\n  value: string;\n}\n\nexport const BanToggleAction = (userId: string): BanToggleAction => {\n  return { type: ActionType.BanToggle, value: userId }\n}\n\ninterface ModToggleAction {\n  type: ActionType.ModToggle;\n  value: string;\n}\n\nexport const ModToggleAction = (userId: string): ModToggleAction => {\n  return { type: ActionType.ModToggle, value: userId }\n}\n\ninterface LoadMessageArchiveAction {\n  type: ActionType.LoadMessageArchive;\n  messages: Message[];\n  whispers: WhisperMessage[];\n}\n\nexport const LoadMessageArchiveAction = (messages: Message[], whispers: WhisperMessage[]): LoadMessageArchiveAction => {\n  return { type: ActionType.LoadMessageArchive, messages: messages, whispers: whispers }\n}\n\ninterface NoteAddAction {\n  type: ActionType.NoteAdd;\n  value: { roomId: string, note: RoomNote };\n}\n\nexport const NoteAddAction = (roomId: string, note: RoomNote): NoteAddAction => {\n  return { type: ActionType.NoteAdd, value: { roomId, note } }\n}\n\ninterface NoteRemoveAction {\n  type: ActionType.NoteRemove;\n  value: { roomId: string, noteId: string };\n}\n\nexport const NoteRemoveAction = (roomId: string, noteId: string): NoteRemoveAction => {\n  return { type: ActionType.NoteRemove, value: { roomId, noteId } }\n}\n\ninterface NoteUpdateLikesAction {\n  type: ActionType.NoteUpdateLikes;\n  value: { roomId: string, noteId: string, likes: string[] };\n}\n\nexport const NoteUpdateLikesAction = (roomId: string, noteId: string, likes: string[]): NoteUpdateLikesAction => {\n  return { type: ActionType.NoteUpdateLikes, value: { roomId, noteId, likes } }\n}\n\ninterface NoteUpdateRoomAction {\n  type: ActionType.NoteUpdateRoom;\n  value: { roomId: string, notes: RoomNote[] };\n}\n\nexport const NoteUpdateRoomAction = (roomId: string, notes: RoomNote[]): NoteUpdateRoomAction => {\n  return { type: ActionType.NoteUpdateRoom, value: { roomId, notes } }\n}\n\ninterface SpaceIsClosedAction {\n  type: ActionType.SpaceIsClosed;\n}\n\nexport const SpaceIsClosedAction = (): SpaceIsClosedAction => {\n  return { type: ActionType.SpaceIsClosed }\n}\n\ninterface SpaceOpenedOrClosedAction {\n  type: ActionType.SpaceOpenedOrClosed;\n  value: boolean\n}\n\nexport const SpaceOpenedOrClosedAction = (value: boolean): SpaceOpenedOrClosedAction => {\n  return { type: ActionType.SpaceOpenedOrClosed, value }\n}\n\ninterface CommandMessageAction {\n  type: ActionType.CommandMessage;\n  value: string\n}\n\nexport const CommandMessageAction = (message: string): CommandMessageAction => {\n  return {\n    type: ActionType.CommandMessage,\n    value: message\n  }\n}\n","// TODO: This conversion shouldn't be necessary\n// But I don't understand how we're using/populating `notes`.\n// There should be a clean refactor here\n// (although this file will probably still exist to be the single point of importing\n// the Server room and just exporting a 'clean' definition)\n\nimport * as Server from '../server/src/rooms'\nimport { RoomNote } from '../server/src/roomNote'\nexport interface Room {\n  displayName: string;\n  shortName: string;\n  id: string;\n  description: string;\n  users?: string[];\n  videoUsers?: string[];\n  mediaChat?: boolean;\n  hidden?: boolean;\n  hasNoteWall?: boolean;\n  noteWallData?: Server.NoteWallData\n  notes?: RoomNote[]\n  specialFeatures?: string[]\n  riddles?: string[]\n}\n\nexport function convertServerRoom (room: Server.Room): Room {\n  return {\n    displayName: room.displayName,\n    id: room.id,\n    shortName: room.shortName,\n    description: room.description,\n    mediaChat: room.mediaChat,\n    hasNoteWall: room.hasNoteWall,\n    noteWallData: room.noteWallData,\n    hidden: room.hidden,\n    specialFeatures: room.specialFeatures,\n    riddles: room.riddles\n  }\n}\n\nexport function convertServerRoomData (roomData: {\n  [roomId: string]: Server.Room;\n}): { [roomId: string]: Room } {\n  const newObj = {}\n\n  Object.keys(roomData).forEach((k) => {\n    const room = roomData[k]\n    newObj[k] = convertServerRoom(room)\n  })\n\n  return newObj\n}\n","export const MESSAGE_MAX_LENGTH = 631\nexport const MESSAGE_MAX_WORD_LENGTH = 60\n","// Enumerates what modal screens we might be showing on top of the chat view\nexport enum Modal {\n    None = 0,\n    ProfileEdit,\n    NoteWall,\n    Settings,\n    MediaSelector,\n    CodeOfConduct,\n    Schedule,\n    Help,\n    Map,\n    Welcome,\n    RoomList,\n    FeatureRainbowGate,\n    FeatureDullDoor,\n    ServerSettings,\n    ClientDeployed,\n    FeatureFullRoomIndex,\n    HappeningNow,\n    Riddles\n}\n","export default {\r\n  SERVER_HOSTNAME: process.env.SERVER_HOSTNAME,\r\n  FIREBASE_CONFIG: {\r\n    apiKey: process.env.FIREBASE_API_KEY,\r\n    authDomain: process.env.FIREBASE_AUTH_DOMAIN,\r\n    projectId: process.env.FIREBASE_PROJECT_ID,\r\n    storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\r\n    appId: process.env.FIREBASE_APP_ID\r\n  }\r\n}\r\n","// Loosely adapted to TS from\n// https://blog.solutelabs.com/configuring-thunk-action-creators-and-redux-dev-tools-with-reacts-usereducer-hook-5a1608476812\nimport { useReducer } from 'react'\n\nexport type ThunkDispatch<A, S> = (action: A | Thunk<A, S>) => void;\ntype Thunk<A, S> = (dispatch: ThunkDispatch<A, S>) => void;\n\nexport function useReducerWithThunk<A, S> (\n  reducer,\n  initialState: S\n): [S, ThunkDispatch<A, S>] {\n  const [state, dispatch] = useReducer<(state: S, action: A) => S>(\n    reducer,\n  initialState\n  )\n\n  const customDispatch = (action: A | Thunk<A, S>) => {\n    // This custom type guard shouldn't be needed in favor of just an inline\n    // typeof === \"function\" check, but I'm getting unexpected type errors.\n    const isFunction = (a: A | Thunk<A, S>): a is Thunk<A, S> => {\n      return typeof a === 'function'\n    }\n\n    if (isFunction(action)) {\n      action(customDispatch)\n    } else {\n      dispatch(action)\n    }\n  }\n  return [state, customDispatch]\n}\n"],"names":["$a4422501c369c0539a150f46fbd5283d$export$97530f655280da2b","handler","$I3NCy$firebaseapp","auth","onAuthStateChanged","fbUser","user","$a4422501c369c0539a150f46fbd5283d$var$firebaseUserToAuthenticatedUser","$a4422501c369c0539a150f46fbd5283d$export$5e4041df45ce7698","currentUser","$a4422501c369c0539a150f46fbd5283d$export$89d8f76a05c4a47b","signOut","fb","shouldVerifyEmail","providerData","length","providerId","emailVerified","id","uid","displayName","email","isSignInWithEmailLink","location","$a4422501c369c0539a150f46fbd5283d$export$1be8cb621677668","actionCodeSettings","url","window","href","handleCodeInApp","sendSignInLinkToEmail","then","console","log","$I3NCy$axios","$4bf385e6d98eae44a13b5820a09d4f5d$var$myUserId","$4bf385e6d98eae44a13b5820a09d4f5d$var$myDispatch","$4bf385e6d98eae44a13b5820a09d4f5d$export$b4e85276e81c9e28","userId","dispatch","result","$4bf385e6d98eae44a13b5820a09d4f5d$var$callAzureFunction","$7tOj7","UpdatedCurrentRoomAction","roomId","$2T4do","convertServerRoomData","roomData","UserMapAction","users","profile","ReceivedMyProfileAction","roomNotes","NoteUpdateRoomAction","UpdatedPresenceAction","presenceData","CustomHttpClient","$I3NCy$DefaultHttpClient","request","getIdToken","headers","userid","super","send","connection","$I3NCy$HubConnectionBuilder","withUrl","$Fqklz","default","SERVER_HOSTNAME","httpClient","configureLogging","$I3NCy$LogLevel","Debug","build","on","PlayerConnectedAction","otherId","PlayerDisconnectedAction","data","messageId","message","ChatMessageAction","CaptionMessageAction","ModMessageAction","modId","targetMessageId","DeleteMessageAction","name","fromId","fromName","PlayerEnteredAction","serverSettings","ReceivedServerSettingsAction","WhisperAction","CommandMessageAction","toId","toName","PlayerLeftAction","map","PlayerBannedAction","PlayerUnbannedAction","ShowModalAction","$7n7eM","Modal","ClientDeployed","ShoutAction","EmoteAction","DanceAction","noteId","authorId","NoteAddAction","NoteRemoveAction","likes","NoteUpdateLikesAction","status","SpaceOpenedOrClosedAction","onclose","addEventListener","e","start","catch","error","$4bf385e6d98eae44a13b5820a09d4f5d$var$connectSignalR","$4bf385e6d98eae44a13b5820a09d4f5d$export$543b5ed2827dbc4d","$4bf385e6d98eae44a13b5820a09d4f5d$export$e4a6e54601af69b2","endpoint","firebaseToken","r","$4bf385e6d98eae44a13b5820a09d4f5d$require$axios","get","withCredentials","Authorization","$4bf385e6d98eae44a13b5820a09d4f5d$var$callAzureFunctionGet","$4bf385e6d98eae44a13b5820a09d4f5d$export$ac6069e6fae731fa","HideModalAction","$4bf385e6d98eae44a13b5820a09d4f5d$export$a04c9e7ed17d87c8","response","UpdatedRoomDataAction","$4bf385e6d98eae44a13b5820a09d4f5d$export$13b49bee9f19e917","isNew","valid","reload","alert","$4bf385e6d98eae44a13b5820a09d4f5d$export$a2d1afebdd14cac","color","$4bf385e6d98eae44a13b5820a09d4f5d$export$e2aa68f7454e6892","font","$4bf385e6d98eae44a13b5820a09d4f5d$export$6947b482912a0d83","registeredUsername","registered","spaceIsClosed","isMod","isBanned","$4bf385e6d98eae44a13b5820a09d4f5d$export$b80d9df236d66516","listName","list","$4bf385e6d98eae44a13b5820a09d4f5d$export$629d30af912426ea","item","$4bf385e6d98eae44a13b5820a09d4f5d$export$407dfa4c492f47ef","drop","$4bf385e6d98eae44a13b5820a09d4f5d$export$70ad1ebf1f8b0f5e","$4bf385e6d98eae44a13b5820a09d4f5d$export$6f5bd6e892eacf3b","$4bf385e6d98eae44a13b5820a09d4f5d$export$75751ca15c99e167","$4bf385e6d98eae44a13b5820a09d4f5d$export$f7d341190acc1a2c","$4bf385e6d98eae44a13b5820a09d4f5d$export$a267db3bb0e89951","$I3NCy$v4","$4bf385e6d98eae44a13b5820a09d4f5d$export$c2cfff4cc2d46bb6","$4bf385e6d98eae44a13b5820a09d4f5d$export$e031aca95afa5e05","like","$4bf385e6d98eae44a13b5820a09d4f5d$export$f4668889f2887f11","$4bf385e6d98eae44a13b5820a09d4f5d$export$25e2482332b08267","$4bf385e6d98eae44a13b5820a09d4f5d$export$ec86960fd73ce342","to","ErrorAction","$4bf385e6d98eae44a13b5820a09d4f5d$export$1efe76c68558acf7","text","$1AmWl","MESSAGE_MAX_LENGTH","ShowProfileAction","$4bf385e6d98eae44a13b5820a09d4f5d$export$75aedc4545980dc2","$4bf385e6d98eae44a13b5820a09d4f5d$export$bb473775fd1c610b","erroc","$4bf385e6d98eae44a13b5820a09d4f5d$export$64cfafb3ab72f4e9","$4bf385e6d98eae44a13b5820a09d4f5d$export$abdcf9b4c684e34a","$4bf385e6d98eae44a13b5820a09d4f5d$export$c1aa29a286311f8c","$4bf385e6d98eae44a13b5820a09d4f5d$export$27d5d1722dfec84d","roomIds","$4bf385e6d98eae44a13b5820a09d4f5d$export$286f3c37d4cef445","room","$4bf385e6d98eae44a13b5820a09d4f5d$export$1cf4cd8aeaefa91d","$4bf385e6d98eae44a13b5820a09d4f5d$export$a755393f85d38f90","$4bf385e6d98eae44a13b5820a09d4f5d$export$c09ea235c1aef5aa","body","post","ActionType","$fcc6b831a372d550ee8daaeca0230454$export$3a053aceab80ba1a","$fcc6b831a372d550ee8daaeca0230454$export$e20b6623fa713b1d","type","ReceivedMyProfile","value","$fcc6b831a372d550ee8daaeca0230454$export$eb490640b2ae4f00","ReceivedServerSettings","$fcc6b831a372d550ee8daaeca0230454$export$5c924be460bed360","UpdatedCurrentRoom","$fcc6b831a372d550ee8daaeca0230454$export$83a6989fd000a129","UpdatedRoomData","$fcc6b831a372d550ee8daaeca0230454$export$2169bbb0f73506cf","UpdatedPresence","$fcc6b831a372d550ee8daaeca0230454$export$1b2cfd42e583e096","PlayerConnected","$fcc6b831a372d550ee8daaeca0230454$export$d49f5551922d2a9a","PlayerDisconnected","$fcc6b831a372d550ee8daaeca0230454$export$a5a9ce1843e6a74d","ChatMessage","$fcc6b831a372d550ee8daaeca0230454$export$c2fccac73312e673","CaptionMessage","$fcc6b831a372d550ee8daaeca0230454$export$2198b26f8679d5ff","Whisper","$fcc6b831a372d550ee8daaeca0230454$export$5953c2744a2db4ee","ModMessage","$fcc6b831a372d550ee8daaeca0230454$export$70e90b8ed58d7c47","DeleteMessage","$fcc6b831a372d550ee8daaeca0230454$export$e167a883e5a89cc6","Shout","$fcc6b831a372d550ee8daaeca0230454$export$fb1572e6e783025a","Emote","$fcc6b831a372d550ee8daaeca0230454$export$dbadc76c2e3fa533","Dance","$fcc6b831a372d550ee8daaeca0230454$export$f3111069aa0d777","PlayerEntered","$fcc6b831a372d550ee8daaeca0230454$export$8d60697e85bf40e4","PlayerLeft","$fcc6b831a372d550ee8daaeca0230454$export$6a9a0c3e726b4617","UserMap","$fcc6b831a372d550ee8daaeca0230454$export$2b5c4ed0c53b6ebf","PlayerBanned","$fcc6b831a372d550ee8daaeca0230454$export$3b8579d4ef31863f","PlayerUnbanned","$fcc6b831a372d550ee8daaeca0230454$export$4708ebc16e953254","UpdateProfileColor","$fcc6b831a372d550ee8daaeca0230454$export$13a96a9fe0b228b1","participantId","MediaReceivedSpeakingData","$fcc6b831a372d550ee8daaeca0230454$export$b8508743548fdbc8","StopVideoChat","$fcc6b831a372d550ee8daaeca0230454$export$e7d2654a2333ead1","StartVideoChat","$fcc6b831a372d550ee8daaeca0230454$export$d43150ec6ab8e2de","Error","$fcc6b831a372d550ee8daaeca0230454$export$ef64320b054c7975","RefreshReact","$fcc6b831a372d550ee8daaeca0230454$export$fff60077252ece8f","SendCaption","$fcc6b831a372d550ee8daaeca0230454$export$e54ca185c4974b88","SendMessage","$fcc6b831a372d550ee8daaeca0230454$export$6454745567a551b9","HideProfile","$fcc6b831a372d550ee8daaeca0230454$export$2f40783e21178a4f","ShowProfile","$fcc6b831a372d550ee8daaeca0230454$export$b1d1792379f3ac0d","modal","ShowModal","$fcc6b831a372d550ee8daaeca0230454$export$c18e19fdca401299","options","ShowModalWithOptions","$fcc6b831a372d550ee8daaeca0230454$export$631d51c35e538c5e","$fcc6b831a372d550ee8daaeca0230454$export$d8ba1899f1ed64","ShowSideMenu","$fcc6b831a372d550ee8daaeca0230454$export$f966e3bdae599be8","HideSideMenu","$fcc6b831a372d550ee8daaeca0230454$export$c0aed05b43e2f6f7","DeactivateAutoscroll","$fcc6b831a372d550ee8daaeca0230454$export$5f040a3b6bd53130","ActivateAutoscroll","$fcc6b831a372d550ee8daaeca0230454$export$351617bddb86d9ab","useSimpleNames","SetUseSimpleNames","$fcc6b831a372d550ee8daaeca0230454$export$50b34956f972bc04","keepCameraWhenMoving","SetKeepCameraWhenMoving","$fcc6b831a372d550ee8daaeca0230454$export$f7814166357e2953","textOnlyMode","refresh","SetTextOnlyMode","$fcc6b831a372d550ee8daaeca0230454$export$52af420ced340f48","enable","SetAudioOnlyMode","$fcc6b831a372d550ee8daaeca0230454$export$f9cbbd7ed0ec6cc1","SetCaptionsEnabled","$fcc6b831a372d550ee8daaeca0230454$export$2ba01bc8f2510694","num","SetNumberOfFaces","$fcc6b831a372d550ee8daaeca0230454$export$f466eb954f2df1ff","provider","mustVerifyEmail","Authenticate","$fcc6b831a372d550ee8daaeca0230454$export$db93b5284c5dd880","IsRegistered","$fcc6b831a372d550ee8daaeca0230454$export$ecc87ab6dce2f06a","BanToggle","$fcc6b831a372d550ee8daaeca0230454$export$20393abc51ac0df","ModToggle","$fcc6b831a372d550ee8daaeca0230454$export$590e5c7ec010a203","messages","whispers","LoadMessageArchive","$fcc6b831a372d550ee8daaeca0230454$export$249d993568a3c1c1","note","NoteAdd","$fcc6b831a372d550ee8daaeca0230454$export$2f8ebdd9c83240b2","NoteRemove","$fcc6b831a372d550ee8daaeca0230454$export$1c7ed48649d5ddb7","NoteUpdateLikes","$fcc6b831a372d550ee8daaeca0230454$export$8d55e539848d62c8","notes","NoteUpdateRoom","$fcc6b831a372d550ee8daaeca0230454$export$2a897187b9aa7195","SpaceIsClosed","$fcc6b831a372d550ee8daaeca0230454$export$1fce826cb6aa561e","SpaceOpenedOrClosed","$fcc6b831a372d550ee8daaeca0230454$export$3bab88f603406476","CommandMessage","$e9ed605e83d3c1ca3391ce78f9254ba8$export$25e14315e3813120","newObj","Object","keys","forEach","k","shortName","description","mediaChat","hasNoteWall","noteWallData","hidden","specialFeatures","riddles","$e9ed605e83d3c1ca3391ce78f9254ba8$export$88cc23f8a90e95db","$c44073072567ed3de65b0646666f2984$export$12a0b7f5f2cff7b8","$c44073072567ed3de65b0646666f2984$export$483d03822faf7fd2","$b4e3c97c3cf2d6bade028c0b3b689eeb$export$b3e36f066d3bceb9","$2ce35ddbb4825256dd6dec37f3a560f4$export$9099ad97b570f7c","process","env","FIREBASE_CONFIG","apiKey","FIREBASE_API_KEY","authDomain","FIREBASE_AUTH_DOMAIN","projectId","FIREBASE_PROJECT_ID","storageBucket","FIREBASE_STORAGE_BUCKET","messagingSenderId","FIREBASE_MESSAGING_SENDER_ID","appId","FIREBASE_APP_ID","$24a09883643b885924fb29d482b3bcdb$export$586eb4064cd270ca","reducer","initialState","state","$I3NCy$useReducer","customDispatch","action"],"version":3,"file":"admin.8b47f750.js.map","sourceRoot":"../"}